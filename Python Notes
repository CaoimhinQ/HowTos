Installing modules
  sudo pip install <module>
    can use --ignore-installed <module. if there are issues with dependent modules
  sudo easy install <module>
  
  "Move into directory ~/Python/2.7/site-packages/
  sudo easy_install pip.
  sudo easy_install virtualenv.
  sudo easy_install nose.
  sudo easy_install distribute."
  
Main function
  def main():
    print("python main function")


  if __name__ == '__main__':
    main()

Naming
  Function naming rules: 
  lowercase with words separated by underscores as necessary
  https://www.python.org/dev/peps/pep-0008/#function-and-variable-names
  
  Class naming:
    Capitalized camel case only used for python class names.
  
  global variables:
    UPPERCASE 

comparisons and operators
  when using None use is rather than ==
  "is" compares identities
  "==" compares values

  
File Handling
  always close the file if opened or use With statement which will close file automaticaly:
    with open('/etc/hosts') as hosts_file:
    for line in hosts_file:
      ...
  check a file exists:
    if os.path.exists("/file-path"):
    
Variables
  If you want it to become a member of your object, instead of a static member, you can define it in the constructor instead of defining in the class.
    def __init__(self):
     self.hostname = createNRNSATopology.get_enm_hostname()
  config.json file for configurable variables, if they will not change then constants in the code is preferable.
  private/protected members start with single underscore _ (this is only a convention)
  mangling is to prevent methods/variables being overwritten when the class is extended by sub classes... variables start with double underscore __ (again only convention)

For loops
  continue to skip the rest of the logic and go back to the next iteration of the for loop
  
Functions
  if there is no return it returns None by default
  private or protected methods start with _ as a prefix to the name. Better to keep functions private if only being used internally.

Exceptions
  better to raise specific exceptions rather than broad
  should not call exit() in functions but in main script if it receives a specific exception.
  
Testing

import unittest
from src.project.log import Logger
from utils import MockLoggingHandler

class BaseTest(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(BaseTest, self).__init__(*args, **kwargs)
        Logger.setup_log(MockLoggingHandler())
        Logger.logger.handlers = [MockLoggingHandler()]
        Logger.logger.handlers[0].reset()

    def setUp(self):
        Logger.logger.handlers[0].reset()

    def assertIn(self, expected, text, msg=""):
        self.assertTrue(expected in text,
                        '"%s" not in "%s". %s' % (expected, text, msg))
  
